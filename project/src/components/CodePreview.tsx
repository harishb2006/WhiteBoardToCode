import React, { useEffect, useState } from 'react';
import { Copy, Download, Play, Sparkles } from 'lucide-react';

interface CodePreviewProps {
  code: string;
  isGenerating: boolean;
}

const CodePreview: React.FC<CodePreviewProps> = ({ code, isGenerating }) => {
  const [copySuccess, setCopySuccess] = useState(false);

  const handleCopy = () => {
    navigator.clipboard.writeText(code);
    setCopySuccess(true);
    setTimeout(() => setCopySuccess(false), 2000);
  };

  const handleDownload = () => {
    const blob = new Blob([code], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'GeneratedComponent.tsx';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const formatCode = (code: string) => {
    // Simple syntax highlighting for demo purposes
    return code
      .replace(/\/\/(.*)/g, '<span class="text-green-600">// $1</span>')
      .replace(/import (.*) from (.*);/g, '<span class="text-purple-600">import</span> <span class="text-blue-600">$1</span> <span class="text-purple-600">from</span> <span class="text-green-600">$2</span>;')
      .replace(/interface (.*) {/g, '<span class="text-purple-600">interface</span> <span class="text-yellow-600">$1</span> {')
      .replace(/const (.*): React\.FC/g, '<span class="text-purple-600">const</span> <span class="text-yellow-600">$1</span>: <span class="text-blue-600">React.FC</span>')
      .replace(/className="([^"]*)"/g, 'className="<span class="text-green-600">$1</span>"')
      .replace(/return \(/g, '<span class="text-purple-600">return</span> (')
      .replace(/export default (.*);/g, '<span class="text-purple-600">export default</span> <span class="text-yellow-600">$1</span>;');
  };

  return (
    <div className="h-full flex flex-col bg-gray-900 text-white">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-700">
        <div className="flex items-center space-x-2">
          <div className="w-3 h-3 bg-red-500 rounded-full"></div>
          <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
          <div className="w-3 h-3 bg-green-500 rounded-full"></div>
          <span className="ml-4 text-sm font-medium">GeneratedComponent.tsx</span>
          {code && (
            <div className="flex items-center space-x-1 ml-2 px-2 py-1 bg-blue-600/20 rounded text-xs">
              <Sparkles className="w-3 h-3" />
              <span>Generated by Gemini AI</span>
            </div>
          )}
        </div>
        
        <div className="flex items-center space-x-2">
          {code && (
            <>
              <button
                onClick={handleCopy}
                className="p-2 hover:bg-gray-700 rounded transition-colors relative"
                title="Copy code"
              >
                <Copy className="w-4 h-4" />
                {copySuccess && (
                  <span className="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-green-600 text-white text-xs px-2 py-1 rounded">
                    Copied!
                  </span>
                )}
              </button>
              <button
                onClick={handleDownload}
                className="p-2 text-gray-400 hover:text-white transition-colors"
                title="Download File"
              >
                <Download className="w-4 h-4" />
              </button>
              <button
                className="p-2 text-gray-400 hover:text-white transition-colors"
                title="Preview Component"
              >
                <Play className="w-4 h-4" />
              </button>
            </>
          )}
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-hidden">
        {isGenerating ? (
          <div className="h-full flex flex-col items-center justify-center p-8">
            <div className="animate-spin w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full mb-4"></div>
            <h3 className="text-lg font-medium mb-2">Generating Component...</h3>
            <p className="text-gray-400 text-center mb-4">
              Gemini AI is analyzing your whiteboard drawing and creating a React component
            </p>
            <div className="text-sm text-gray-500 space-y-1">
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                <span>Analyzing drawing elements...</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse delay-150"></div>
                <span>Detecting UI patterns...</span>
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse delay-300"></div>
                <span>Generating React code...</span>
              </div>
            </div>
          </div>
        ) : code ? (
          <pre className="text-sm leading-relaxed">
            <code 
              dangerouslySetInnerHTML={{ 
                __html: formatCode(code) 
              }}
            />
          </pre>
        ) : (
          <div className="h-full flex flex-col items-center justify-center p-8 text-center">
            <Sparkles className="w-16 h-16 text-blue-500 mb-4" />
            <h3 className="text-xl font-medium mb-2">AI Code Generation</h3>
            <p className="text-gray-400 mb-6 max-w-md">
              Draw UI components on the whiteboard and click "Generate Code" to create React components using Gemini AI
            </p>
            <div className="bg-gray-800 rounded-lg p-4 max-w-md">
              <h4 className="text-sm font-medium mb-2">Supported Elements:</h4>
              <ul className="text-sm text-gray-400 space-y-1">
                <li>• Rectangles → Cards, Buttons, Containers</li>
                <li>• Circles → Avatars, Icons, Badges</li>
                <li>• Text → Headers, Labels, Content</li>
                <li>• Drawings → Custom UI patterns</li>
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CodePreview;